{{ if $.Values.testDataProvider.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: test-data-provider
    app.kubernetes.io/instance: {{ $.Release.Name }}
  name: test-data-provider
  namespace: {{ $.Release.Name }}
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: test-data-provider
  serviceName: test-data-provider
  template:
    metadata:
      labels:
        app: test-data-provider
    spec:
      initContainers:
      {{- if $.Values.global.resetSnapshot }}
      - args:
        - https://snapshots.nine-chronicles.com/{{ $.Values.snapshot.path }}
        - /data/test-data-provider
        - $(RESET_SNAPSHOT_OPTION)
        - test-data-provider
        - $(SLACK_WEBHOOK_URL)
        - $(SNAPSHOT_ROLLBACK_OPTION)
        command:
        - /bin/download_snapshot.sh
        image: {{ $.Values.global.image.repository }}:{{ $.Values.global.image.tag }}
        volumeMounts:
        - name: download-snapshot-script
          mountPath: /bin/download_snapshot.sh
          readOnly: true
          subPath: download_snapshot.sh
        - mountPath: /data
          name: test-data-provider-data
        name: reset-snapshot
        env:
        - name: RESET_SNAPSHOT_OPTION
          value: "{{ $.Values.global.resetSnapshot }}"
        - name: SNAPSHOT_ROLLBACK_OPTION
          value: "{{ $.Values.global.rollbackSnapshot }}"
        - name: SLACK_WEBHOOK_URL
          valueFrom:
            secretKeyRef:
              name: slack
              key: slack-webhook-url
      {{- end }}
      - name: wait
        image: alpine
        imagePullPolicy: Always
        command:
        - sh
        - -c
        - |
          apk --no-cache add curl
          # Endpoint to check
          ENDPOINT="http://validator-5.{{ $.Release.Name }}.svc.cluster.local/ui/playground"
          echo Checking: ${ENDPOINT}
          while [[ $(curl --silent --output /dev/null --request GET --write-out "%{http_code}" ${ENDPOINT}) -ne 200 ]]; do
            echo "Not ready"
            sleep 5s
          done
          echo Ready
      containers:
      - args:
        - /bin/setup_internal_db.sh "$(NC_MySqlConnectionString)" "$(MIGRATE_DB_OPTION)"
          && /bin/check_chain_tip.sh $(DP_HOST) $(DP_USER) $(DP_TOKEN) $(DP_PORT) $(DP_DATABASE) $(RESET_SNAPSHOT_OPTION)
          && /app/NineChronicles.DataProvider.Executable
        command:
        - /bin/sh
        - -c
        env:
        - name: NC_StorePath
          value: /data/test-data-provider
        - name: NC_AppProtocolVersionToken
          value: {{ $.Values.global.appProtocolVersion }}
        - name: NC_Confirmations
          value: '0'
        {{ range $idx, $peer := $.Values.global.peerStrings }}
        - name: NC_PeerStrings__{{ $idx }}
          value: {{ $peer }}
        {{ end }}
        - name: NC_Preload
          value: 'false'
        - name: NC_NoMiner
          value: 'true'
        - name: NC_Render
          value: "{{ $.Values.testDataProvider.render }}"
        - name: NC_NetworkType
          value: "{{ $.Values.global.networkType }}"
        - name: NC_TrustedAppProtocolVersionSigners__0
          value: {{ $.Values.global.trustedAppProtocolVersionSigner }}
        - name: NC_GenesisBlockPath
          value: {{ $.Values.global.genesisBlockPath }}
        - name: NC_BlockIndexFilePath
          value: /data
        - name: NC_TxLifeTime
          value: '10'
        - name: NC_MySqlConnectionString
          valueFrom:
            secretKeyRef:
              key: connectionString
              name: test-data-provider
        - name: DP_HOST
          valueFrom:
            secretKeyRef:
              key: host
              name: test-data-provider
        - name: DP_USER
          valueFrom:
            secretKeyRef:
              key: user
              name: test-data-provider
        - name: DP_TOKEN
          valueFrom:
            secretKeyRef:
              key: password
              name: test-data-provider
        - name: DP_PORT
          valueFrom:
            secretKeyRef:
              key: port
              name: test-data-provider
        - name: DP_DATABASE
          valueFrom:
            secretKeyRef:
              key: database
              name: test-data-provider
        - name: RESET_SNAPSHOT_OPTION
          value: "{{ $.Values.global.resetSnapshot }}"
        - name: MIGRATE_DB_OPTION
          value: "{{ $.Values.testDataProvider.migrateDatabase }}"
        image: {{ $.Values.testDataProvider.image.repository }}:{{ $.Values.testDataProvider.image.tag }}
        imagePullPolicy: {{ $.Values.testDataProvider.image.pullPolicy }}
        livenessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - "set -e\ntest=\"$(\n  curl \\\n    -H 'Content-Type: application/json'\
              \ \\\n    --data '{\"query\":\"query{test}\"\
              }' \\\n    http://localhost:80/graphql \\\n  | jq -r '.data.test'\n\
              )\"\nif [[ -n $test ]]; then\n  echo \"DataProvider query successful!\"\
              \nelse\n  echo \"DataProvider query unsuccessful!\"\nfi\n[[ -n $test\
              \ ]]\n"
          initialDelaySeconds: 600
          periodSeconds: 60
          timeoutSeconds: 60
        name: test-data-provider
        ports:
        - containerPort: 80
          name: graphql
          protocol: TCP
        - containerPort: 31234
          name: headless
          protocol: TCP
        {{- with $.Values.testDataProvider.resources }}
        resources:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /bin/check_chain_tip.sh
          name: test-data-provider-script-volume
          readOnly: true
          subPath: check_chain_tip.sh
        - mountPath: /bin/setup_internal_db.sh
          name: test-data-provider-script-volume
          readOnly: true
          subPath: setup_internal_db.sh
        - mountPath: /data
          name: test-data-provider-data
      {{- with $.Values.testDataProvider.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      terminationGracePeriodSeconds: 30
      volumes:
      - name: reset-snapshot-script
        configMap:
          defaultMode: 0700
          name: reset-snapshot-script
      - name: download-snapshot-script
        configMap:
          defaultMode: 0700
          name: {{ $.Release.Name }}-download-snapshot-script
      - name: test-data-provider-script-volume
        configMap:
          defaultMode: 488
          name: {{ $.Release.Name }}-data-provider-script
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      name: test-data-provider-data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: {{ $.Values.testDataProvider.storage.data }}
      storageClassName: {{ $.Release.Name }}-gp3
      volumeMode: Filesystem

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: test-data-provider-db
    app.kubernetes.io/instance: {{ $.Release.Name }}
  name: test-data-provider-db
  namespace: {{ $.Release.Name }}
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: test-data-provider-db
  serviceName: test-data-provider-db
  template:
    metadata:
      labels:
        app: test-data-provider-db
    spec:
      containers:
        - env:
            - name: MYSQL_DATABASE
              valueFrom:
                secretKeyRef:
                  key: database
                  name: test-data-provider
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: test-data-provider
          image: mysql:8.0.30
          name: test-data-provider-db
          ports:
            - containerPort: 3306
          resources: {}
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: test-data-provider-db-data
      restartPolicy: Always
  volumeClaimTemplates:
    - metadata:
        creationTimestamp: null
        name: test-data-provider-db-data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: {{ $.Values.testDataProvider.db.storage }}
        storageClassName: {{ $.Release.Name }}-gp3
        volumeMode: Filesystem
{{ end }}
